import telebot
import requests
from openai import OpenAI
from datetime import datetime
import re
import langdetect

bot = telebot.TeleBot('8094647476:AAG-LJ8xPwZ48k4g-L26xyQwAIjflZAUEq4')
alert_bot = telebot.TeleBot('7589135275:AAFmG20JWh6fyfr9pgSK8fUv0RMfhYxukLk')

client = OpenAI(  # üîß FIX: —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞–≤ –∫–ª—ñ—î–Ω—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∫–ª–∞—Å
    api_key="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"
)

NEWS_API_KEY = 'ee58ae79b7174efc8cb97cec9853eb06'
crypto = 'bca9f320-f9fc-410f-8b0c-a9ef74f3dc86'
user_histories = {}
ADMIN_CHAT_ID = 7589135275

client_for_images = OpenAI(api_key="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")

def is_simple_math_expression(text):
    return bool(re.fullmatch(r'\d+\s*[\+\-\*/]\s*\d+', text))

def get_main_menu():
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('üì°–û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤–∏–Ω–∏üì°', '–ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è')
    markup.row('üìÜ–î—ñ–∑–Ω–∞—Ç–∏—Å—è –¥–∞—Ç—ÉüìÜ', '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é')
    markup.row('–Ø–∫–∏–π –∑–∞—Ä–∞–∑ –∫—É—Ä—Å –¥–æ–ª–∞—Ä–∞?', 'help')
    markup.row('üòì–±–æ—Ç –Ω–µ –ø—Ä–∞—Ü—é—î!üò•', '–ö–æ–ª–∏ —Ç–∏ –∑—Ä–æ–±–ª–µ–Ω–∏–π')
    return markup

def get_news(query):
    url = f'https://newsapi.org/v2/everything?q={query}&apiKey={NEWS_API_KEY}'
    response = requests.get(url)
    if response.status_code == 200:
        news_data = response.json()
        articles = news_data['articles']
        if articles:
            news_summary = ""
            for article in articles[:5]:
                title = article['title']
                description = article['description']
                url = article['url']
                news_summary += f"**{title}**\n{description}\n{url}\n\n"
            return news_summary
        else:
            return "–ù–µ–º–∞—î –Ω–æ–≤–∏–Ω –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º."
    else:
        return "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω."

def get_usd_to_uah_rate():
    url = f'https://api.exchangerate-api.com/v4/latest/USD'
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        uah_rate = data['rates'].get('UAH')
        if uah_rate:
            return f"–ö—É—Ä—Å –¥–æ–ª–∞—Ä–∞ –∑–∞—Ä–∞–∑: 1 USD = {uah_rate} UAH"
        else:
            return "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫—É—Ä—Å –≥—Ä–∏–≤–Ω—ñ."
    else:
        return "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫—É—Ä—Å—É –≤–∞–ª—é—Ç."

def contains_url(text):
    url_pattern = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
    return re.search(url_pattern, text)

def generate_image(prompt_text):
    API_KEY = 'quickstart-QUdJIGlzIGNvbWluZy4uLi4K'  # üîß FIX: –¥–æ–¥–∞–≤ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π API_KEY –¥–ª—è DeepAI
    headers = {
        'api-key': API_KEY
    }
    data = {
        'text': prompt_text
    }
    response = requests.post('https://api.deepai.org/api/text2img', data=data, headers=headers)
    if response.status_code == 200:
        result = response.json()
        return result.get('output_url')
    else:
        print("–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–∞—Ä—Ç–∏–Ω–∫–∏:", response.text)
        return None

@bot.message_handler(commands=['start'])
def start_handler(message):
    first_name = message.from_user.first_name
    bot.send_message(message.chat.id,
                     f'–ü—Ä–∏–≤—ñ—Ç, {first_name}! –Ø TechnoProger IA ü§ñ! –ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ –±—É–¥—å-—è–∫–µ –ø–∏—Ç–∞–Ω–Ω—è, —ñ —è –¥–∞–º –≤—ñ–¥–ø–æ–≤—ñ–¥—å! ‚ú®',
                     reply_markup=get_main_menu())
    user_histories[message.chat.id] = []

@bot.message_handler(func=lambda message: True)
def chat_with_gpt(message):
    user_id = message.chat.id
    user_input = message.text.lower()

    if user_input.startswith('–∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É'):
        prompt_text = message.text.replace('–∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É', '').strip()
        if not prompt_text:
            bot.send_message(user_id, "‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –æ–ø–∏—Å –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏.")
            return

        detected_language = langdetect.detect(message.text)
        try:
            translation_completion = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system",
                     "content": "Translate the following text to English, but don't explain anything."},
                    {"role": "user", "content": prompt_text}
                ]
            )
            english_prompt = translation_completion.choices[0].message.content.strip()
        except Exception as e:
            bot.send_message(user_id, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ –æ–ø–∏—Å—É –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return

        bot.send_message(user_id, "üñåÔ∏è –ì–µ–Ω–µ—Ä—É—é –≤–∞—à—É –∫–∞—Ä—Ç–∏–Ω–∫—É... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–æ —Ö–≤–∏–ª–∏–Ω–∏!")
        image_url = generate_image(english_prompt)
        if image_url:
            caption_text = {
                'uk': f"üñºÔ∏è –û—Å—å –≤–∞—à–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∑–∞ –∑–∞–ø–∏—Ç–æ–º: \"{prompt_text}\"",
                'ru': f"üñºÔ∏è –í–æ—Ç –≤–∞—à–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: \"{prompt_text}\"",
                'en': f"üñºÔ∏è Here is your image for the prompt: \"{prompt_text}\""
            }.get(detected_language,
                  f"üñºÔ∏è –û—Å—å –≤–∞—à–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∑–∞ –∑–∞–ø–∏—Ç–æ–º: \"{prompt_text}\"")
            bot.send_photo(user_id, image_url, caption=caption_text)
        else:
            bot.send_message(user_id,
                             "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–∞—Ä—Ç–∏–Ω–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ —ñ–Ω—à–∏–º –æ–ø–∏—Å–æ–º.")
        return

    if user_id not in user_histories:
        user_histories[user_id] = []

    if contains_url(user_input):
        bot.send_message(user_id, "‚ö†Ô∏è –í–∏–±–∞—á—Ç–µ, —è –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∂—É –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏. –ù–µ –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ —ó—Ö –º–µ–Ω—ñ! üõë")
        return

    user_histories[user_id].append({"role": "user", "content": user_input})

    try:
        detected_language = langdetect.detect(user_input)
        if '—è–∫–∏–π —Å—å–æ–≥–æ–¥–Ω—ñ –¥–µ–Ω—å' in user_input or '–¥—ñ–∑–Ω–∞—Ç–∏—Å—è –¥–∞—Ç—É' in user_input:
            now = datetime.now()
            formatted_date = now.strftime("%d.%m.%Y")
            formatted_time = now.strftime("%H:%M")
            reply = f"üìÖ –°—å–æ–≥–æ–¥–Ω—ñ {formatted_date}, üïí —á–∞—Å: {formatted_time}."
        elif '–∫–æ–ª–∏ —Ç–∏ –∑—Ä–æ–±–ª–µ–Ω–∏–π' in user_input:
            username = "ùïÆùñîùñëùñâùñäùïÆùñÜùñô"
            reply = f"–Ø –±—É–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π {username} üßô‚Äç‚ôÇÔ∏è —Ç–∞ –∑–∞–ø—É—â–µ–Ω–∏–π 26 –∫–≤—ñ—Ç–Ω—è 2025 —Ä–æ–∫—É –æ 10:00. –ú–æ—è –º—ñ—Å—ñ—è ‚Äî –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ –≤–∞–º! üöÄ"
        elif '–¥–µ —Ç—å–æ–ª–∫–∏' in user_input:
            reply = "üòâ –î—ñ–≤—á–∞—Ç–∞ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –≤ —Ä—ñ–∑–Ω–∏—Ö –º—ñ—Å—Ü—è—Ö: —É –ø–∞—Ä–∫—É üå≥, –≤ –∫–∞—Ñ–µ ‚òï, –Ω–∞ –∑–∞—Ö–æ–¥–∞—Ö üéâ –∞–±–æ –≤ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞—Ö üéì. –ë—É–¥—å –≤–≤—ñ—á–ª–∏–≤–∏–º!"
        elif '–Ω–æ–≤–∏–Ω–∏' in user_input:
            query = user_input.replace('–Ω–æ–≤–∏–Ω–∏', '').strip()
            if query:
                reply = get_news(query)
            else:
                reply = "üì∞ –ë—É–¥—å –ª–∞—Å–∫–∞, —É—Ç–æ—á–Ω—ñ—Ç—å, –ø—Ä–æ —è–∫—ñ –Ω–æ–≤–∏–Ω–∏ –≤–∏ —Ö–æ—á–µ—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è."
        elif '—è–∫–∏–π –∑–∞—Ä–∞–∑ –∫—É—Ä—Å –¥–æ–ª–∞—Ä–∞?' in user_input or '–¥–æ–ª–∞—Ä' in user_input:
            reply = get_usd_to_uah_rate()
        elif 'help' in user_input:
            reply = "üòâ–ó–∞–ø–∏—Ç–∞–π—Ç–µ –≤ –º–µ–Ω–µ —â–æ –Ω–µ –±—É–¥—å —è –ø–æ–ø–∏—Ç–∞—é—Å—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ –Ω–∞ —Ü–µ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏üòÜ"
        elif 'üòì–±–æ—Ç –Ω–µ –ø—Ä–∞—Ü—é—î!üò•' in user_input:
            username = message.from_user.first_name
            alert_bot.send_message(ADMIN_CHAT_ID, f"üö® {username} –ø–æ–¥–∞–≤ —Å–∫–∞—Ä–≥—É, —â–æ –±–æ—Ç –Ω–µ –ø—Ä–∞—Ü—é—î!")
            reply = "üòì –ú–∏ –ø—Ä–∞—Ü—é—î–º–æ –Ω–∞–¥ –≤–∏—Ä—ñ—à–µ–Ω–Ω—è–º –ø—Ä–æ–±–ª–µ–º–∏. –°–∫–æ—Ä–æ –≤—Å–µ –±—É–¥–µ –¥–æ–±—Ä–µ!"
        else:
            try:
                completion = client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content":
                            "–¢–∏ ‚Äî —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç —ñ–∑ –≥–∞—Ä–Ω–∏–º –Ω–∞—Å—Ç—Ä–æ—î–º üòä.\n\n"
                            f"–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –Ω–∞ –º–æ–≤—ñ, –Ω–∞ —è–∫—ñ–π –ø–∏—à–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: {detected_language}.\n"
                            "- –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–¥–∞—î –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –ª—é–¥–µ–π, –ø–æ–¥—ñ—ó –∞–±–æ —Ñ–∞–∫—Ç–∏, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π —á—ñ—Ç–∫–æ —ñ –≤–≤—ñ—á–ª–∏–≤–æ, –¥–æ–¥–∞—é—á–∏ –∫—ñ–ª—å–∫–∞ —Å–º–∞–π–ª–∏–∫—ñ–≤.\n"
                            "- –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–∏—à–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω—É –∑–∞–¥–∞—á—É –∞–±–æ –≤–∏—Ä–∞–∑, —Ç–æ–¥—ñ:\n"
                                " * –ü–∏—à–∏ –±–µ–∑ LaTeX-—Å–∏–º–≤–æ–ª—ñ–≤.\n"
                                " * –í–≤–æ–¥—å –∑–º—ñ–Ω–Ω—ñ —á–µ—Ä–µ–∑ –ª—ñ—Ç–µ—Ä–∏.\n"
                                " * –ü–æ—è—Å–Ω—é–π —Ä—ñ—à–µ–Ω–Ω—è –∫—Ä–æ–∫ –∑–∞ –∫—Ä–æ–∫–æ–º –ø—Ä–æ—Å—Ç–∏–º–∏ —Ä–µ—á–µ–Ω–Ω—è–º–∏.\n"
                                " * –ü—ñ—Å–ª—è —Ä—ñ—à–µ–Ω–Ω—è –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –Ω–∞–ø–∏—à–∏ –í—ñ–¥–ø–æ–≤—ñ–¥—å: ...\n"
                            "–ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω–∏–º —É —Ç–æ–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ üß°."
                        }
                    ] + user_histories[user_id][-10:]
                )
                reply = completion.choices[0].message.content
            except Exception as e:
                reply = "‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ GPT. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."

        bot.send_message(user_id, reply)

    except Exception as e:
        bot.send_message(user_id, "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.")

print("‚úÖ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!")
bot.polling(none_stop=True)
